// Teste do endpoint de m√©tricas
const BASE_URL = 'http://localhost:3000';

async function testMetrics() {
  console.log('üß™ Testando Endpoint de M√©tricas\n');

  try {
    // Teste 1: M√©tricas gerais (todas)
    console.log('1Ô∏è‚É£ Testando m√©tricas gerais...');
    const response1 = await fetch(`${BASE_URL}/metrics`);
    const data1 = await response1.json();
    console.log('‚úÖ M√©tricas gerais:', {
      period: data1.period,
      total_records: data1.summary?.total_records,
      total_tables: data1.summary?.total_tables
    });

    // Teste 2: M√©tricas do dia
    console.log('\n2Ô∏è‚É£ Testando m√©tricas do dia...');
    const response2 = await fetch(`${BASE_URL}/metrics?period=day`);
    const data2 = await response2.json();
    console.log('‚úÖ M√©tricas do dia:', {
      period: data2.period,
      funcionarios: data2.metrics?.funcionarios,
      recados: data2.metrics?.recados,
      reunioes: data2.metrics?.reunioes
    });

    // Teste 3: M√©tricas da semana
    console.log('\n3Ô∏è‚É£ Testando m√©tricas da semana...');
    const response3 = await fetch(`${BASE_URL}/metrics?period=week`);
    const data3 = await response3.json();
    console.log('‚úÖ M√©tricas da semana:', {
      period: data3.period,
      funcionarios: data3.metrics?.funcionarios,
      recados: data3.metrics?.recados,
      reunioes: data3.metrics?.reunioes
    });

    // Teste 4: M√©tricas do m√™s
    console.log('\n4Ô∏è‚É£ Testando m√©tricas do m√™s...');
    const response4 = await fetch(`${BASE_URL}/metrics?period=month`);
    const data4 = await response4.json();
    console.log('‚úÖ M√©tricas do m√™s:', {
      period: data4.period,
      funcionarios: data4.metrics?.funcionarios,
      recados: data4.metrics?.recados,
      reunioes: data4.metrics?.reunioes
    });

    // Teste 5: M√©tricas do ano
    console.log('\n5Ô∏è‚É£ Testando m√©tricas do ano...');
    const response5 = await fetch(`${BASE_URL}/metrics?period=year`);
    const data5 = await response5.json();
    console.log('‚úÖ M√©tricas do ano:', {
      period: data5.period,
      funcionarios: data5.metrics?.funcionarios,
      recados: data5.metrics?.recados,
      reunioes: data5.metrics?.reunioes
    });

    // Teste 6: M√©tricas em tempo real
    console.log('\n6Ô∏è‚É£ Testando m√©tricas em tempo real...');
    const response6 = await fetch(`${BASE_URL}/metrics/realtime`);
    const data6 = await response6.json();
    console.log('‚úÖ M√©tricas em tempo real:', {
      period: data6.period,
      new_recados: data6.metrics?.new_recados,
      new_reunioes: data6.metrics?.new_reunioes,
      chat_interactions: data6.metrics?.chat_interactions
    });

    // Teste 7: M√©tricas com filtro de inst√¢ncia
    console.log('\n7Ô∏è‚É£ Testando m√©tricas com filtro de inst√¢ncia...');
    const response7 = await fetch(`${BASE_URL}/metrics?period=day&instance=test_instance`);
    const data7 = await response7.json();
    console.log('‚úÖ M√©tricas com inst√¢ncia:', {
      period: data7.period,
      instance: data7.instance,
      funcionarios: data7.metrics?.funcionarios,
      recados: data7.metrics?.recados
    });

    // Teste 8: Per√≠odo inv√°lido
    console.log('\n8Ô∏è‚É£ Testando per√≠odo inv√°lido...');
    const response8 = await fetch(`${BASE_URL}/metrics?period=invalid`);
    const data8 = await response8.json();
    console.log('‚úÖ Erro de per√≠odo inv√°lido:', {
      status: response8.status,
      error: data8.error
    });

    console.log('\nüéâ Todos os testes conclu√≠dos!');

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  }
}

// Executar testes se o arquivo for executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testMetrics();
}

export { testMetrics }; 