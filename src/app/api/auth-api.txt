
const API_URL = 'http://localhost:3000'; // Troque para o endereço do seu backend

  // Cadastro de prefeitura (infogeral)
  register(data: {
    humannumber: string;
    municipio?: string;
    instance?: string;
    endereco?: string;
    cnpj?: string;
    email?: string;
    horariofuncionamento?: string;
    idcalendario?: string;
    temporeuniao?: number;
    orgao?: string;
  }): Observable<any> {
    return this.http.post(`${API_URL}/auth/register`, data);
  }

  // Geração de código (precisa do humannumber da prefeitura)
  generateCode(humannumber: string, webhook_url?: string): Observable<any> {
    return this.http.post(`${API_URL}/code/generate`, { humannumber, webhook_url });
  }

  // Login com humannumber e código
  login(humannumber: string, code: string): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(`${API_URL}/auth/login`, { humannumber, code });
  }

  // CRUD genérico (create, read, update, delete)
  crud(
    token: string,
    table: string,
    action: 'create' | 'read' | 'update' | 'delete',
    filters?: any,
    data?: any
  ): Observable<any> {
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(
      `${API_URL}/crud`,
      { table, action, filters, data },
      { headers }
    );
  }

  // Confirmação de código (caso use a rota /code/confirm)
  confirmCode(humannumber: string, code: string): Observable<any> {
    return this.http.post(`${API_URL}/code/confirm`, { humannumber, code });
  }

  // Buscar prefeitura por telefone (humannumber) usando CRUD genérico
  getPrefeituraByHumannumber(token: string, humannumber: string): Observable<any> {
    return this.crud(token, 'infogeral', 'read', { humannumber });
  }

  // Atualizar dados da prefeitura
  updatePrefeitura(token: string, id: number, data: any): Observable<any> {
    return this.crud(token, 'infogeral', 'update', { id }, data);
  }

  // Deletar prefeitura
  deletePrefeitura(token: string, id: number): Observable<any> {
    return this.crud(token, 'infogeral', 'delete', { id });
  }

  // Exemplo de uso para outras tabelas:
  // Buscar funcionários por cargo
  getFuncionariosByCargo(token: string, cargo: string): Observable<any> {
    return this.crud(token, 'funcionarios', 'read', { cargo });
  }

  // Atualizar funcionário
  updateFuncionario(token: string, id: number, data: any): Observable<any> {
    return this.crud(token, 'funcionarios', 'update', { id }, data);
  }

  // Deletar funcionário
  deleteFuncionario(token: string, id: number): Observable<any> {
    return this.crud(token, 'funcionarios', 'delete', { id });
  }


  validateToken(token: string): Observable<{ valid: boolean, data?: any }> {
    return this.http.post<{ valid: boolean, data?: any }>(
      `${API_URL}/auth/validate-token`,
      { token }
    );
  }
} 